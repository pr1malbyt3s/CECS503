//Problem 7.1
//Referenced Data Structures and Algorithm
//Analysis in C++ textbook
#include <iostream>
#include <vector>

using namespace std;

void sort(vector<int> a) {
	int k = 0;
	int tmp = 0;
	
	for(int i = 1; i < a.size(); i++) {
		tmp = a[i];
		for(k = i; k > 0 && tmp < a[k-1]; k--) {
			a[k] = a[k-1];
		}
		a[k] = tmp;
		cout << "Pass " << i << endl;
		cout << "Current Order: ";
		for(int i = 0; i < a.size() - 1; i++) {
			cout << a[i] << ", ";
		}
		cout << a[a.size()-1];
		cout << endl;
	}
}

int main() {
	vector<int> a = {3,1,4,1,5,9,2,6,5};
	sort(a);
}

//Problem 7.15
//Referenced: 
//http://ankitstar.blogspot.com/2011/05/merge-sort.html
#include <iostream>
#include <vector>

using namespace std;

void mergeSort(int[], int, int);
void merge(int[], int, int, int);
void printA(int[], int);

int main() {
	int numbers[] = {3,1,4,1,5,9,2,6};
	cout << "Array before sorting: " << endl;
	printA(numbers, 8);
	mergeSort(numbers, 0, 7);
	cout << "Array after sorting: " << endl;
	printA(numbers, 8);
	cout << numbers[7] << endl;
}

void printA(int A[], int size) {
	for(int i = 0; i < size - 1; i++) {
		cout << A[i] << ", ";
	}
	cout << A[size - 1] << endl;
}

void mergeSort(int a[], int p, int r) {
	//cout << "MergeSort being performed." << endl;
	//printA(a, 8);
	if(p < r) {
		int q = (p + r)/2;
		mergeSort(a, p, q);
		mergeSort(a, q + 1, r);
		merge(a, p, q, r);
	}
}

void merge(int a[], int p, int q, int r) {
	int c[8];
	int i = p;
	int j = q+1;
	int k = p;
	while((i <= q) && (j <= r)) {
		if(a[i] < a[j]) {
			c[k] = a[i];
			i = i + 1;
			k = k + 1;
		}
		
		else {
			c[k] =  a[j];
			j = j + 1;
			k = k + 1;
		}
	}
	
	while(i <= q) {
		c[k] = a[i];
		i = i + 1;
		k = k + 1;
	}
	while(j <= r) {
		c[k] = a[j];
		j = j + 1;
		k = k + 1;
	}
	//Copy sorted array over.
	int l = p;
	while(l <= r) {
		a[l] = c[l];
		l = l + 1;
	}
}

//Problem 7.19
//Referenced: Provided course source code and
//Data Structures and Algorithm Analysis in C++
#include <iostream>
#include <vector>

using namespace std;

const int & median3(vector<int> &, int , int);
void quicksort(vector<int> &, int, int);
void insertionSort(vector<int> &, int, int);
void printV(vector<int>);

int main() {
	vector <int> numeros = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};
	cout << "Array before sorting: " << endl;
	printV(numeros);
	quicksort(numeros, 0, numeros.size() - 1);
	cout << "Array after sorting: " << endl;
	printV(numeros);
}

//Method to print vector.
void printV(vector<int> p) {
	for(int i = 0; i < p.size() - 1; i++) {
		cout << p[i] << ", ";
	}
	cout << p[p.size() - 1] << endl;
}

//Median-of-three partitioning.
//Finds median of first element, last element, and center element.
const int & median3(vector<int> & a, int left, int right) {
	int center = (left + right)/2;
	if(a[center] < a[left]) {
		swap(a[left], a[center]);
	}
	if(a[right] < a[right]) {
		swap(a[left], a[right]);
	}
	if(a[right] < a[center]) {
		swap(a[center], a[right]);
	}
	//Pivot position placed at right - 1.
	swap(a[center], a[right - 1]);
	return a[right - 1];
}

//QuickSort function.
void quicksort(vector<int> & a, int left, int right) {
	//cout << "QuickSort being performed." << endl;
	//printV(a);
	if(left + 3 <= right) {
		int pivot = median3(a, left, right);
		int i = left;
		int j = right - 1;
		//Infinite Loop
		for( ; ; ) {
			while(a[++i] < pivot) {}
			while(pivot < a[--j]) {}
			if(i < j) {
				swap(a[i], a[j]);
			}
			else {
				break;
			}
		}
		//Restore the pivot
		swap(a[i], a[right - 1]);
		//Sort small elements
		quicksort(a, left, i - 1);
		//Sort large elements
		quicksort(a, i + 1, right);
	}
	else {
		insertionSort(a, left, right);
	}
}

//InsertionSort function.
void insertionSort(vector<int> & a, int low, int high) {
	//cout << "InsertionSort being performed." << endl;
	//printV(a);
	for(int p = low + 1; p <= high; p++) {
		int tmp = a[p];
		int j;
		for(j = p; j > low && tmp < a[j-1]; j--) {
			a[j] = a[j-1];
		}
		a[j] = tmp;
	}
}

